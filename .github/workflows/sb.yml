# ...
jobs:
  build_and_release:
    # ...
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name_suffix: linux-x64
          - os: ubuntu-latest # 使用 Ubuntu runner 进行 Linux MUSL 交叉编译
            target: x86_64-unknown-linux-musl
            asset_name_suffix: linux-musl-x64
            use_cross: true # 标记此配置需要使用 cross
          # ... 其他操作系统
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain for ${{ matrix.target }}
        if: ${{ !matrix.use_cross }} # 如果不使用 cross，安装普通 toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Install cross
        if: ${{ matrix.use_cross }} # 如果使用 cross，安装 cross
        run: cargo install cross --git https://github.com/cross-rs/cross --tag v0.2.5 # 或者指定一个稳定版本

      - name: Get release version from tag
        id: get_version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Build Rust project with Cargo
        if: ${{ !matrix.use_cross }} # 如果不使用 cross，使用 cargo build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build Rust project with Cross
        if: ${{ matrix.use_cross }} # 如果使用 cross，使用 cross build
        run: cross build --release --target ${{ matrix.target }}
        env:
          # 如果你的项目需要 OpenSSL，通常需要 Vendored 的功能来避免运行时依赖
          RUSTFLAGS: -C target-feature=+crt-static # for static linking if needed, especially with MUSL

      - name: Prepare artifact directory
        id: prepare_artifact
        run: |
          ASSET_DIR_NAME="${{ github.event.repository.name }}-${{ env.RELEASE_VERSION }}-${{ matrix.asset_name_suffix }}"
          mkdir -p "$ASSET_DIR_NAME"

          # 复制可执行文件，这里需要根据 cross 的输出路径进行调整，通常还是 target/<target>/release/
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/${{ github.event.repository.name }}.exe "$ASSET_DIR_NAME/"
          else
            cp target/${{ matrix.target }}/release/${{ github.event.repository.name }} "$ASSET_DIR_NAME/"
          fi

          cp README.md "$ASSET_DIR_NAME/" || true
          cp LICENSE "$ASSET_DIR_NAME/" || true

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a "$ASSET_DIR_NAME.zip" "$ASSET_DIR_NAME"
            echo "ASSET_PATH=${ASSET_DIR_NAME}.zip" >> $GITHUB_ENV
          else
            tar -czvf "$ASSET_DIR_NAME.tar.gz" "$ASSET_DIR_NAME"
            echo "ASSET_PATH=${ASSET_DIR_NAME}.tar.gz" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Create Release (if not exists)
        id: create_release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          draft: true
          prerelease: false
          generate_release_notes: true

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_PATH }}
