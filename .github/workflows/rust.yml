name: Build and Release

on:
  push:
    branches:
      - main
  release:
    types: [published]

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        target: [x86_64-pc-windows-msvc, aarch64-apple-darwin, x86_64-unknown-linux-gnu]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Install dependencies
      run: rustup target add ${{ matrix.target }}

    - name: Build project
      run: cargo build --release --target ${{ matrix.target }}

    - name: Package binary
      run: |
        mkdir -p dist
        tar -czvf dist/${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release .

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.target }}-binary
        path: dist/${{ matrix.target }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./dist

    - name: Create release
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const artifacts = fs.readdirSync('./dist');
          for (const artifact of artifacts) {
            github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              name: path.basename(artifact),
              data: fs.readFileSync(`./dist/${artifact}`)
            });
          }
