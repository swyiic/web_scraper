name: Cross-platform Build and Release

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-apple-darwin
          - x86_64-pc-windows-msvc

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install cross (for Linux target)
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cross

      - name: Build release binary
        run: |
          if [ ${{ matrix.os }} == 'ubuntu-latest' ]; then
            cross build --release --target ${{ matrix.target }};
          else
            cargo build --release --target ${{ matrix.target }};
          fi

      - name: Package the binary
        run: |
          BINARY_NAME=$(basename $(find target/${{ matrix.target }}/release -type f -maxdepth 1 -executable))
          OUTPUT_FILE="${{ github.event.release.tag_name }}-${{ matrix.target }}.tar.gz"
          tar -czvf $OUTPUT_FILE -C target/${{ matrix.target }}/release $BINARY_NAME

      - name: Upload artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ github.event.release.tag_name }}-${{ matrix.target }}.tar.gz
          asset_name: ${{ github.event.release.tag_name }}-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip
