name: Release Executables

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch: # 允许手动运行，但手动运行时不会创建 Release，只会构建

permissions:
  contents: write # 必须有写入权限

jobs:
  build_and_release:
    name: Build ${{ matrix.os_label }} (${{ matrix.arch_label }})
    runs-on: ${{ matrix.runner_os }}
    strategy:
      matrix:
        include:
          - runner_os: ubuntu-latest
            rust_target: x86_64-unknown-linux-gnu
            os_label: Linux
            arch_label: x64
            archive_ext: tar.gz
            exe_suffix: ""

          - runner_os: macos-latest
            rust_target: x86_64-apple-darwin
            os_label: macOS
            arch_label: x64
            archive_ext: tar.gz
            exe_suffix: ""

          - runner_os: macos-latest
            rust_target: aarch64-apple-darwin
            os_label: macOS
            arch_label: arm64
            archive_ext: tar.gz
            exe_suffix: ""

          - runner_os: windows-latest
            rust_target: x86_64-pc-windows-msvc
            os_label: Windows
            arch_label: x64
            archive_ext: zip
            exe_suffix: ".exe" # Windows 可执行文件有 .exe 后缀

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.rust_target }}

      - name: Build Release Binary
        run: cargo build --release --target ${{ matrix.rust_target }}

      - name: Package Artifact
        id: package_artifact
        shell: bash
        run: |
          APP_NAME=$(basename $(pwd)) # 获取项目名称
          RELEASE_VERSION=${GITHUB_REF#refs/tags/} # 从tag中获取版本号

          # 构建输出文件夹和文件名
          ARTIFACT_DIR="${APP_NAME}-${RELEASE_VERSION}-${{ matrix.os_label }}-${{ matrix.arch_label }}"
          mkdir -p "$ARTIFACT_DIR"

          # 复制可执行文件
          cp target/${{ matrix.rust_target }}/release/${APP_NAME}${{ matrix.exe_suffix }} "$ARTIFACT_DIR/"

          # (可选) 复制 README 和 LICENSE
          cp README.md "$ARTIFACT_DIR/" || true
          cp LICENSE "$ARTIFACT_DIR/" || true

          # 打包
          ARCHIVE_NAME="${ARTIFACT_DIR}.${{ matrix.archive_ext }}"
          if [[ "${{ matrix.archive_ext }}" == "zip" ]]; then
            zip -r "$ARCHIVE_NAME" "$ARTIFACT_DIR"
          else
            tar -czvf "$ARCHIVE_NAME" "$ARTIFACT_DIR"
          fi
          echo "ASSET_PATH=$ARCHIVE_NAME" >> $GITHUB_ENV # 存储打包后的文件路径

      - name: Create GitHub Release (only on tag push)
        id: create_release
        # 这一步只在 tag 触发时执行，否则会跳过，导致 upload_url 不存在
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          draft: true
          prerelease: false
          generate_release_notes: true

      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/') && steps.create_release.outputs.upload_url # 确保 release 创建成功才尝试上传
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_PATH }} # 文件名与路径相同
