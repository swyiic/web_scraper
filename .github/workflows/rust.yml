name: Release

on:
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_ext: ''
            asset_ext: ''

          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_ext: '.exe'
            asset_ext: '.exe'

          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_ext: ''
            asset_ext: ''

          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_ext: ''
            asset_ext: ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Get project name
        id: get_project_name
        run: |
          PROJECT_NAME=$(tomlq -r '.package.name' Cargo.toml)
          echo "project_name=$PROJECT_NAME" >> $GITHUB_ENV
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
        shell: bash
        env:
          TOMLQ_VERSION: 0.19.0

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Strip binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ env.project_name }}${{ matrix.artifact_ext }}

      - name: Upload binary to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.target }}/release/${{ env.project_name }}${{ matrix.artifact_ext }}
          asset_name: ${{ env.project_name }}-${{ matrix.target }}${{ matrix.asset_ext }}
          tag: ${{ github.ref }}    
