name: Release Executables (with Cross)

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch: # 允许手动运行（但手动运行时不会创建 Release）

permissions:
  contents: write # 必须有写入权限

jobs:
  build_and_release:
    name: Build ${{ matrix.os_label }} (${{ matrix.arch_label }})
    runs-on: ${{ matrix.runner_os }}
    strategy:
      matrix:
        include:
          - runner_os: ubuntu-latest
            rust_target: x86_64-unknown-linux-musl # 使用 musl 以实现静态链接，更兼容
            os_label: Linux
            arch_label: x64
            archive_ext: tar.gz
            exe_suffix: ""
            use_cross: true # 标记此任务使用 cross

          - runner_os: macos-latest
            rust_target: x86_64-apple-darwin
            os_label: macOS
            arch_label: x64
            archive_ext: tar.gz
            exe_suffix: ""
            use_cross: false # 不使用 cross，因为 macos runner 直接支持

          - runner_os: macos-latest
            rust_target: aarch64-apple-darwin
            os_label: macOS
            arch_label: arm64
            archive_ext: tar.gz
            exe_suffix: ""
            use_cross: false

          - runner_os: windows-latest
            rust_target: x86_64-pc-windows-msvc
            os_label: Windows
            arch_label: x64
            archive_ext: zip
            exe_suffix: ".exe"
            use_cross: true # Windows 上的交叉编译也用 cross

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain (for non-cross targets)
        if: ${{ !matrix.use_cross }}
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.rust_target }}

      - name: Install Cross (for cross targets)
        if: ${{ matrix.use_cross }}
        run: cargo install cross --git https://github.com/cross-rs/cross --tag v0.2.5 # 安装 cross 工具

      - name: Build Release Binary
        run: |
          if [[ "${{ matrix.use_cross }}" == "true" ]]; then
            # 如果使用 cross，需要提供目标，并且可能需要额外的 RUSTFLAGS
            cross build --release --target ${{ matrix.rust_target }}
          else
            # 否则使用 cargo
            cargo build --release --target ${{ matrix.rust_target }}
          fi
        # 如果你的项目依赖 OpenSSL 等，可能需要设置这些环境变量来协助 cross
        env:
          # 以下是 OpenSSL 静态链接的常见设置，根据你的项目需要调整
          RUSTFLAGS: -C target-feature=+crt-static # For MUSL and other static linking scenarios
          # OPENSSL_STATIC: 1
          # PKG_CONFIG_ALLOW_CROSS: 1

      - name: Package Artifact
        id: package_artifact
        shell: bash
        run: |
          APP_NAME=$(basename $(pwd))
          # 对于手动运行，GITHUB_REF_NAME 是 'main' 或 'master'。对于 tag 触发，是 'v1.0.0'
          # 这里稍微处理一下，让手动运行时也能生成一个可识别的名称
          RELEASE_VERSION=${GITHUB_REF_NAME}
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            RELEASE_VERSION=${GITHUB_REF#refs/tags/}
          fi

          ARTIFACT_DIR="${APP_NAME}-${RELEASE_VERSION}-${{ matrix.os_label }}-${{ matrix.arch_label }}"
          mkdir -p "$ARTIFACT_DIR"

          # 复制可执行文件
          cp target/${{ matrix.rust_target }}/release/${APP_NAME}${{ matrix.exe_suffix }} "$ARTIFACT_DIR/"

          cp README.md "$ARTIFACT_DIR/" || true
          cp LICENSE "$ARTIFACT_DIR/" || true

          ARCHIVE_NAME="${ARTIFACT_DIR}.${{ matrix.archive_ext }}"
          if [[ "${{ matrix.archive_ext }}" == "zip" ]]; then
            zip -r "$ARCHIVE_NAME" "$ARTIFACT_DIR"
          else
            tar -czvf "$ARCHIVE_NAME" "$ARTIFACT_DIR"
          fi
          echo "ASSET_PATH=$ARCHIVE_NAME" >> $GITHUB_ENV

      - name: Create GitHub Release (only on tag push)
        id: create_release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          draft: true
          prerelease: false
          generate_release_notes: true

      - name: Upload Release Asset
        # 只有在 tag 触发，并且 create_release 步骤成功执行后才上传
        if: startsWith(github.ref, 'refs/tags/') && steps.create_release.outputs.upload_url
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_PATH }}
